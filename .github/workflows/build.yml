name: build

on: [push]

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name}}
          draft: false
          prerelease: false

  release_asset:
    name: Release Asset

    needs: [release]

    strategy:
      matrix:
        include:
          - os: windows-latest
            generator: "MinGW Makefiles"
            file_suffix: windows.7z

          - os: ubuntu-latest
            generator: "Unix Makefiles"
            file_suffix: linux.tar.xz

    env:
      toolname: sfc-comp

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v1

      - name: Set Name
        run: |
          echo "archive_name=${{ env.toolname }}-${{ github.ref_name }}-${{ matrix.file_suffix }}" >> $GITHUB_ENV
          echo "dir_name=${{ env.toolname }}-${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: Create an archive
        run: |
          mkdir ${{ env.dir_name }}
          mv build/bin doc LICENSE README.md ${{ env.dir_name }}
          if [ "$RUNNER_OS" == "Linux" ]; then
            tar cf - ${{ env.dir_name }} | xz -z > ${{ env.archive_name }}
          elif [ "$RUNNER_OS" == "Windows" ]; then
            7z a ${{ env.archive_name }} ${{ env.dir_name }}
          else
            echo "Not a supported os: $RUNNER_OS"
            exit 1
          fi

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.archive_name }}
          asset_name: ${{ env.archive_name }}
          asset_content_type: application/octet-stream
